# coding: utf-8

"""
    Veeva Vault API v25.1

    The latest GA version of the Vault REST API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


class VeevaException(Exception):
    """The base exception class for all VeevaExceptions"""


class ApiTypeError(VeevaException, TypeError):
    """Raised when a type is invalid."""
    def __init__(self, msg, path_to_item=None, valid_classes=None,
                 key_type=None) -> None:
        """Initializes an ApiTypeError.

        Args:
            msg (str): the exception message
            path_to_item (list, optional): a list of keys an indices to get to the
                current_item. Defaults to None.
            valid_classes (tuple, optional): the primitive classes that current item
                should be an instance of. Defaults to None.
            key_type (bool, optional): False if our value is a value in a dict
                True if it is a key in a dict
                False if our item is an item in a list.
                Defaults to None.
        """
        self.path_to_item = path_to_item
        self.valid_classes = valid_classes
        self.key_type = key_type
        full_msg = msg
        if path_to_item:
            full_msg = "{0} at {1}".format(msg, render_path(path_to_item))
        super(ApiTypeError, self).__init__(full_msg)


class ApiValueError(VeevaException, ValueError):
    """Raised when a value is invalid."""
    def __init__(self, msg, path_to_item=None) -> None:
        """Initializes an ApiValueError.

        Args:
            msg (str): the exception message
            path_to_item (list, optional): the path to the exception in the
                received_data dict. Defaults to None.
        """
        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = "{0} at {1}".format(msg, render_path(path_to_item))
        super(ApiValueError, self).__init__(full_msg)


class ApiAttributeError(VeevaException, AttributeError):
    """Raised when an attribute reference or assignment fails."""
    def __init__(self, msg, path_to_item=None) -> None:
        """Initializes an ApiAttributeError.

        Args:
            msg (str): the exception message
            path_to_item (list, optional): the path to the exception in the
                received_data dict. Defaults to None.
        """
        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = "{0} at {1}".format(msg, render_path(path_to_item))
        super(ApiAttributeError, self).__init__(full_msg)


class ApiKeyError(VeevaException, KeyError):
    """Raised when a key is not found in a dictionary."""
    def __init__(self, msg, path_to_item=None) -> None:
        """Initializes an ApiKeyError.

        Args:
            msg (str): the exception message
            path_to_item (list, optional): the path to the exception in the
                received_data dict. Defaults to None.
        """
        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = "{0} at {1}".format(msg, render_path(path_to_item))
        super(ApiKeyError, self).__init__(full_msg)


class ApiException(VeevaException):
    """The base exception class for all API exceptions."""

    def __init__(self, status=None, reason=None, http_resp=None) -> None:
        """Initializes an ApiException.

        Args:
            status (int, optional): The HTTP status code. Defaults to None.
            reason (str, optional): The HTTP reason phrase. Defaults to None.
            http_resp (urllib3.HTTPResponse, optional): The HTTP response. Defaults to None.
        """
        if http_resp:
            self.status = http_resp.status
            self.reason = http_resp.reason
            self.body = http_resp.data
            self.headers = http_resp.getheaders()
        else:
            self.status = status
            self.reason = reason
            self.body = None
            self.headers = None

    def __str__(self):
        """Custom error messages for exception"""
        error_message = "({0})\n"\
                        "Reason: {1}\n".format(self.status, self.reason)
        if self.headers:
            error_message += "HTTP response headers: {0}\n".format(
                self.headers)

        if self.body:
            error_message += "HTTP response body: {0}\n".format(self.body)

        return error_message


class BadRequestException(ApiException):
    """Raised for a 400 Bad Request."""

    def __init__(self, status=None, reason=None, http_resp=None) -> None:
        """Initializes a BadRequestException."""
        super(BadRequestException, self).__init__(status, reason, http_resp)


class NotFoundException(ApiException):
    """Raised for a 404 Not Found."""

    def __init__(self, status=None, reason=None, http_resp=None) -> None:
        """Initializes a NotFoundException."""
        super(NotFoundException, self).__init__(status, reason, http_resp)


class UnauthorizedException(ApiException):
    """Raised for a 401 Unauthorized."""

    def __init__(self, status=None, reason=None, http_resp=None) -> None:
        """Initializes an UnauthorizedException."""
        super(UnauthorizedException, self).__init__(status, reason, http_resp)


class ForbiddenException(ApiException):
    """Raised for a 403 Forbidden."""

    def __init__(self, status=None, reason=None, http_resp=None) -> None:
        """Initializes a ForbiddenException."""
        super(ForbiddenException, self).__init__(status, reason, http_resp)


class ServiceException(ApiException):
    """Raised for a 5xx server error."""

    def __init__(self, status=None, reason=None, http_resp=None) -> None:
        """Initializes a ServiceException."""
        super(ServiceException, self).__init__(status, reason, http_resp)


def render_path(path_to_item):
    """Returns a string representation of a path"""
    result = ""
    for pth in path_to_item:
        if isinstance(pth, int):
            result += "[{0}]".format(pth)
        else:
            result += "['{0}']".format(pth)
    return result
